# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Run Test Execution

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Test environment (ENV_DEV or ENV_OPS)
        required: true
        default: 'ENV_OPS'
      xray_key:
        description: XRay Test Execution key to run
        required: true
        default: 'RSPY-730'

permissions:
  contents: write
  checks: write
  pull-requests: write

jobs:
  build:

    runs-on: ubuntu-latest

    environment:
      name: ${{ inputs.environment }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    - uses: browser-actions/setup-geckodriver@latest
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Export tests from Jira/Xray
      env:
        INPUT_XRAY_KEY: ${{ inputs.xray_key }}
        XRAY_USER: ${{ secrets.XRAY_USER }}
        XRAY_PASSWORD: ${{ secrets.XRAY_PASSWORD }}
        XRAY_BASE_URL: ${{ secrets.XRAY_BASE_URL }}
      run: |
        python jira_export_features.py
        unzip -u -o -d features ~/snap/firefox/common/tmp/downloads/FeatureBundle.zip

    - name: Upload features as artifact
      uses: actions/upload-artifact@v4
      with:
        name: features
        path: ~/snap/firefox/common/tmp/downloads/FeatureBundle.zip

    - name: Run tests with behave
      env:
        APIKEY_URL: ${{ vars.APIKEY_URL }}
        AUXIP_STAC_API_URL: ${{ vars.AUXIP_STAC_API_URL }}
        CADIP_STAC_API_URL: ${{ vars.CADIP_STAC_API_URL }}
        CATALOG_STAC_API_URL: ${{ vars.CATALOG_STAC_API_URL }}
        RSPY_HOST_CATALOG: ${{ vars.RSPY_HOST_CATALOG }}
        KEYCLOAK_URL: ${{ vars.KEYCLOAK_URL }}
        LTA_STAC_API_URL: ${{ vars.LTA_STAC_API_URL }}
        PREFECT_API_URL: ${{ vars.PREFECT_API_URL }}
        PRIP_STAC_API_URL: ${{ vars.PRIP_STAC_API_URL }}
        RSPY_REALM: ${{ vars.RSPY_REALM }}
        RSPY_TEST_USER_1: ${{ secrets.RSPY_TEST_USER_1 }}
        RSPY_TEST_PASS_1: ${{ secrets.RSPY_TEST_PASS_1 }}
        RSPY_TEST_APIK_1: ${{ secrets.RSPY_TEST_APIK_1 }}
        RS_PYTHON_URL: ${{ vars.RS_PYTHON_URL }}
        RS_SERVER_URL: ${{ vars.RS_SERVER_URL }}
        S3_DOMAIN_URL: ${{ vars.S3_DOMAIN_URL }}

      run: |
        behave --junit -f json.pretty --logging-level DEBUG -o reports/results.json || true

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      id: test-results
      if: always()
      with:
        files: |
          reports/**/*.xml

    - name: Upload test reports as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: reports
        path: reports/

    - name: Import test execution results to Jira/Xray (OPS)
      if: inputs.environment == 'ENV_OPS' && (success() || failure())
      env:
        INPUT_XRAY_KEY: ${{ inputs.xray_key }}
        XRAY_USER: ${{ secrets.XRAY_USER }}
        XRAY_PASSWORD: ${{ secrets.XRAY_PASSWORD }}
        XRAY_BASE_URL: ${{ secrets.XRAY_BASE_URL }}
      run: |
        python jira_import_test_execution.py

    - name: Set badge color (OPS)
      shell: bash
      if: inputs.environment == 'ENV_OPS' && (success() || failure())
      run: |
        case ${{ fromJSON( steps.test-results.outputs.json ).conclusion }} in
          success)
            echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
            ;;
          failure)
            echo "BADGE_COLOR=800000" >> $GITHUB_ENV
            ;;
          neutral)
            echo "BADGE_COLOR=696969" >> $GITHUB_ENV
            ;;
        esac

    - name: Create badge (OPS)
      uses: emibcn/badge-action@v2.0.3
      id: badge
      if: inputs.environment == 'ENV_OPS' && (success() || failure())
      with:
        label: Tests
        status: '${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.tests }} tests, ${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.runs }} runs: ${{ fromJSON( steps.test-results.outputs.json ).conclusion }}'
        color: ${{ env.BADGE_COLOR }}
        path: badge.svg

    - name: Upload badge as artifact
      uses: actions/upload-artifact@v4
      if: inputs.environment == 'ENV_OPS' && (success() || failure())
      with:
        name: badge
        path: badge.svg
        if-no-files-found: error

    - name: Commit badge (OPS)
      if: inputs.environment == 'ENV_OPS' && (success() || failure())
      continue-on-error: true
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        mv badge.svg newbadge.svg
        git fetch origin badges
        git switch badges
        mv newbadge.svg badge.svg
        git add badge.svg
        git commit -m "Add/Update badge" || true

    - name: Push badge commit (OPS)
      uses: ad-m/github-push-action@master
      if: inputs.environment == 'ENV_OPS' && (success() || failure())
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        force_with_lease: true
        branch: badges
